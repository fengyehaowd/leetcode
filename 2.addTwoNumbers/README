1,很显然的一个想法，就是转为int，或者long int，链表转为数值，数值加起来之再转为链表

遇到的第一个问题，就是边界条件的问题，也提醒我们：

算法中的奇技淫巧实际上是没啥大用的，朴实的边界条件等问题才是最最关键的。

(1)0 0 0作为边界出错了，
(2) 233333333333333333333333 23333333333333333333越界之后，显然这种方法已经完全不可行。

因此，第一种方法给出虽然是正确的，但是范围有限。

2, 考虑直接进行加法运算。遍历两个链表，进行操作即可。
但是既然要非常清楚的考虑边界条件。

击败效率 100%的程序！

3，这样写，实际上还是稍显复杂，实际上，由于前后节点的状态很像马尔可夫链，因此，非常适合递归。
显然，递归算法的效率比较一般　(beat 35%) 但是比较清晰，难以出错。

